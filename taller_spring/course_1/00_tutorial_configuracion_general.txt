
SPRING WEB MVC
--------------

MAKING THE PROJECT USING STS (Spring Tool Suite)

Prerequisites:
    - JRE and SDK
    - STS
    - Tomcat

01.- Open STS

02.- Click on File / New / Other or alt+mac+N

03.- Select Maven Project (you can find using wizards: maven)

04.- In the next window select the option:
        Create a simple project (skip archetype selection)

05.- In the next window register:
        Group Id: com.myproject_sts
        ArtifactId: MyProjectSTS
        Version: 0.0.1
        Packaging: war

06.- After that click on Finish

07.- When te system finished, second click on name MyProjectSTS
     and go to Properties.

08.- In the right page select "Project Facets" and after that 
     in the last left pane click on Tab "Runtimes" add using
     new the tomcat.

09.- Check versi√≥n of Java in this case 1.7.

10.- Finally click on OK.

11.- After that close and reopen the project.


        







MAKING THE PROJECT WITH INTELLIJ

Here I will put step by step to make a project with spring web mvc.

Prerequisites:
    - JRE and SDK
    - IntelliJ
    - Tomcat 

01.- Enter to IntelliJ and select Maven option in the middle left. / Press Next
02.- Fill the next data:
        GroupId:
            com.myproject
        ArtifactId:
            MyProject
        Version
            1.0 SNAPSHOT
03.- Fill the name of the project and location.
04.- Add under </version> before </project> next lines:

    <groupId>com.myproject</groupId>
    <artifactId>Spring4WebMVCMaven</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>war</packaging>

    <dependencies>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>4.3.0.RELEASE</version>
            <version>4.1.4.RELEASE</version>
        </dependency>
    </dependencies>


05.- To add classes open folder of the project and locate:
    src/main/java
    And second click and select new class ...
    
    In the text put:
    com.myproject.controller.HomeController

    And in code:

        package com.myproject;

        import org.springframework.stereotype.Controller;
        import org.springframework.web.bind.annotation.RequestMapping;

        @Controller
        public class HomeController {
            @RequestMapping(value="/")
            public String home()
            {
                return "test"; // type exactly the string 
            }
        }


06.- Second click on main to create next folders:
    - src/main/webapp
    - src/main/webapp/WEB-INF

07.- Add file webapp/test.jsp content:
    <%@ page contentType="text/html;charset=UTF-8" language="java" %>
    <html>
    <head>
        <title>Title</title>
    </head>
    <body>
        Hello World !
    </body>
    </html>

08.- Add file webapp/WEB-INF/web.xml content:

    <?xml version="1.0" encoding="UTF-8" ?>
    <web-app id="WebApp_ID" version="2.4"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns="http://java.sun.com/xml/ns/javaee"
             xsi:schemaLocation="http://java.sun.com/xml/ns/jee
                                 http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">
        <servlet>
            <servlet-name>spring</servlet-name>
            <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
            <load-on-startup>1</load-on-startup>
        </servlet>
        <servlet-mapping>
            <servlet-name>spring</servlet-name>
            <url-pattern>/</url-pattern>
        </servlet-mapping>
        <context-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>/WEB-INF/spring-servlet.xml</param-value>
        </context-param>
        <listener>
            <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
        </listener>
    </web-app>

09.- Add file using: File / New / XML Configuration File / Spring Config
     with name and path:
        webapp/WEB-INF/spring-servlet.xml

     NOTE: When you add this file will appear a notification that says
     Frameworks detected, and you will have to click on 'Configure' and
     finally click on OK button.

10.- The content of file webapp/WEB-INF/spring-servlet.xml:

    <?xml version="1.0" encoding="UTF-8"?>
    <beans xmlns="http://www.springframework.org/schema/beans"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xmlns:context="http://www.springframework.org/schema/context"
           xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
        <context:component-scan base-package="com.myproject" />
    </beans>

11.- Add next Class:
        com.myproject.util.AppConfig

    With the next code:
        package com.myproject.util;

        import org.springframework.context.annotation.Bean;
        import org.springframework.context.annotation.Configuration;
        import org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer;
        import org.springframework.web.servlet.config.annotation.EnableWebMvc;
        import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;
        import org.springframework.web.servlet.view.InternalResourceViewResolver;

        /**
         * Created by omaryahir on 6/22/16.
         */
        @Configuration
        @EnableWebMvc
        public class AppConfig extends WebMvcConfigurerAdapter{
            @Bean
            public InternalResourceViewResolver viewResolver(){
                InternalResourceViewResolver internalResourceViewResolver = new InternalResourceViewResolver();
                internalResourceViewResolver.setPrefix("/");
                internalResourceViewResolver.setSuffix(".jsp");
                return internalResourceViewResolver;
            }

            @Override
            public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {
               configurer.enable();
            }
        }


    NOTE: You can use mac+shift+a to open action dialog.

12.- Go to menu Run and Edit Configurations and inside click on '+'
    click on 34 more ... and type Tomcat. Select Tomcat Server / Local.

13.- Click on Deployment and click on '+'. Select Artitact...
     In the list select myproject:war exploded and after that on OK.

     NOTE: You can use Fix button select my project:war exploded and
     click on OK.

14.- Click on Run and after that Run.

    NOTA: You can use ctrl+alt+run

